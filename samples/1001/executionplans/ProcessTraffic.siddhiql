/* Enter a unique ExecutionPlan */
@Plan:name('ProcessTraffic')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('timeBetweenStopsStream:1.0.0')
define stream timeTakenStream (stopId string, prevStopId string, stopIdLatitude double, stopIdLongitude double, prevStopIdLatitude double, prevStopIdLongitude double, timeStamp long, t_hour int, timeTaken long);

@Export('processedTrafficStream:1.0.0')
define stream trafficStream (id string, state string, information string, fromLng double, fromLat double, toLng double, toLat double);

from timeTakenStream[timeTaken > 350000]
select prevStopId as id, "Severe" as state, "Severe Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from timeTakenStream[timeTaken <= 350000 AND timeTaken > 250000]
select prevStopId as id, "Moderate" as state, "Moderate Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from timeTakenStream[timeTaken <= 250000 AND timeTaken > 10000]
select prevStopId as id, "Normal" as state, "Normal Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from timeTakenStream[timeTaken <= 10000]
select prevStopId as id, "Minimal" as state, "Minimal Traffic" as information, prevStopIdLongitude as fromLng, prevStopIdLatitude as fromLat, stopIdLongitude as toLng, stopIdLatitude as toLat
insert into #intermTrafficStream;

from every e1=#intermTrafficStream -> e2=#intermTrafficStream[e1.id == id AND e1.state != state]
select e2[0].id, e2[0].state, e2[0].information, e2[0].fromLng, e2[0].fromLat, e2[0].toLng, e2[0].toLat
insert into trafficStream;